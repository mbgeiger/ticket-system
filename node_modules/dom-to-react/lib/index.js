"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _noTextChildNodes = _interopRequireDefault(require("./noTextChildNodes"));

var _possibleStandardNames = _interopRequireDefault(require("./possibleStandardNames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Dom2React =
/*#__PURE__*/
function () {
  function Dom2React(tests) {
    _classCallCheck(this, Dom2React);

    this.tests = tests || [];
  }

  _createClass(Dom2React, [{
    key: "prepareChildren",
    value: function prepareChildren(childNodeList, level) {
      var _this = this;

      var children = Array.prototype.slice.call(childNodeList).map(function (node, index) {
        return _this.prepareNode(node, level + 1, index);
      }).filter(Boolean);
      if (!children.length) return null;
      return children;
    }
  }, {
    key: "prepareAttributes",
    value: function prepareAttributes(node, reactKey) {
      var attributes = {
        key: reactKey
      };
      var nodeClassNames = node.getAttribute('class');

      if (nodeClassNames) {
        attributes.className = nodeClassNames;
      }

      Array.prototype.slice.call(node.attributes).map(function (att) {
        switch (att.name) {
          //these are manually handled above, so break;
          case 'class':
          case 'style':
            break;

          case 'checked':
          case 'selected':
          case 'disabled':
          case 'autoplay':
          case 'controls':
            attributes[att.name] = att.name;
            break;

          default:
            if (_possibleStandardNames.default[att.name]) {
              attributes[_possibleStandardNames.default[att.name]] = att.value;
            } else {
              attributes[att.name] = att.value;
            }

        }

        return null;
      });
      return attributes;
    }
  }, {
    key: "prepareNode",
    value: function prepareNode(_node) {
      var _this2 = this;

      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      if (!_node) return null;
      var node = _node;
      var key = "".concat(level, "-").concat(index);
      var result = [];
      this.tests.forEach(function (test) {
        if (test.condition(node, key, level, _this2)) {
          if (typeof test.modify === 'function') {
            node = test.modify(node, key, level, _this2);

            if (!(node instanceof Node)) {
              node = _node;
              console.warn('The `modify`-method always must return a valid DomNode (instanceof Node) - your modification will be ignored (Hint: if you want to render a React-component, use the `action`-method instead)');
            }
          }

          if (typeof test.action === 'function') {
            result.push(test.action(node, key, level, _this2));
          }
        }
      });
      if (result.length) return result;

      switch (node.nodeType) {
        case 1:
          // regular dom-node
          return _react.default.createElement(node.nodeName.toLowerCase(), this.prepareAttributes(node, key), this.prepareChildren(node.childNodes, level));

        case 3:
          // textnode
          var nodeText = node.nodeValue.toString();

          if (!node.parentNode) {
            return nodeText;
          }

          var parentNodeName = node.parentNode.nodeName.toLowerCase();

          if (_noTextChildNodes.default.indexOf(parentNodeName) !== -1) {
            if (/\S/.test(nodeText)) {
              console.warn("a textnode is not allowed inside '".concat(parentNodeName, "'. your text \"").concat(nodeText, "\" will be ignored"));
            }

            return null;
          }

          return nodeText;

        case 8:
          // html-comment
          // console.info(node.nodeValue.toString());
          return null;

        default:
          // console.warn(`unhandled nodetype ${node.nodeType}`);
          return null;
      }
    }
  }]);

  return Dom2React;
}();

var _default = Dom2React;
exports.default = _default;